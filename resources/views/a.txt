<style>
        .hover-lift {
            transition: all 0.3s ease;
        }

        .hover-lift:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15) !important;
        }

        .transition-all {
            transition: all 0.3s ease;
        }

        .bg-gradient-success {
            background: linear-gradient(135deg, #28a745, #20c997);
        }

        .card {
            transition: all 0.3s ease;
        }

        .table-hover tbody tr:hover {
            background-color: rgba(0, 0, 0, 0.02);
        }

        .progress {
            border-radius: 10px;
            overflow: hidden;
        }

        .progress-bar {
            transition: width 0.6s ease;
        }

        .badge {
            font-weight: 500;
        }

        .card-header {
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        @media (max-width: 768px) {
            .container-fluid {
                padding: 1rem;
            }

            .card-body {
                padding: 1rem;
            }

            .table-responsive {
                font-size: 0.875rem;
            }
        }
    </style>
    <!-- SCRIPT FILTER SESI & DOKTER UNTUK KUNJUNGAN PER SESI -->
    <script>
        function getCurrentSesiKunjungan() {
            const hour = new Date().getHours();
            if (hour >= 6 && hour < 12) return 'pagi';
            if (hour >= 12 && hour < 15) return 'siang';
            if (hour >= 15 && hour <= 18) return 'sore';
            if (hour > 18 && hour <= 22) return 'malam'; // <== Tambahan sesi malam
            return null;
        }

        function autoSelectSesiKunjungan() {
            const sesiNow = getCurrentSesiKunjungan();
            if (!sesiNow) return;

            const sesiSelect = document.querySelector('.sesiSelectKunjungan');
            if (sesiSelect) {
                sesiSelect.value = sesiNow;
                filterTabelKunjungan();
            }
        }

        function filterTabelKunjungan() {
            const selectedSesi = document.querySelector('.sesiSelectKunjungan')?.value;
            const selectedDokter = document.querySelector('.dokterSelect')?.value;

            document.querySelectorAll('.sesi-kunjungan-table').forEach(table => {
                const sesi = table.dataset.sesi;
                const isVisibleSesi = sesi === selectedSesi;
                table.style.display = isVisibleSesi ? 'block' : 'none';

                if (isVisibleSesi) {
                    table.querySelectorAll('.baris-kunjungan').forEach(row => {
                        const rowDokter = row.dataset.dokter;
                        row.style.display = (selectedDokter === 'semua' || rowDokter === selectedDokter) ?
                            '' : 'none';
                    });
                }
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            autoSelectSesiKunjungan();

            document.querySelector('.sesiSelectKunjungan')?.addEventListener('change', filterTabelKunjungan);
            document.querySelector('.dokterSelect')?.addEventListener('change', filterTabelKunjungan);
        });
    </script>

    <!--DROPDOWN SESI DI PERIKSA-->
    <script>
        function getCurrentSesiDiperiksa() {
            const hour = new Date().getHours();
            if (hour >= 6 && hour < 12) return 'sesiDiperiksa-Pagi';
            if (hour >= 12 && hour < 15) return 'sesiDiperiksa-Siang';
            if (hour >= 15 && hour <= 18) return 'sesiDiperiksa-Sore';
            if (hour > 18 && hour <= 22) return 'sesiDiperiksa-Malam'; // Tambahan sesi Malam
            return 'sesiDiperiksa-Pagi'; // Default fallback
        }

        function showSesiTableDiperiksa(selectedId) {
            document.querySelectorAll('.sesiDiperiksa-table').forEach(table => {
                table.style.display = 'none';
            });

            const selectedTable = document.getElementById(selectedId);
            if (selectedTable) {
                selectedTable.style.display = 'block';
                selectedTable.scrollIntoView({
                    behavior: 'smooth'
                });
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            const currentSesi = getCurrentSesiDiperiksa();
            const select = document.getElementById('sesiSelectDiperiksa');
            const opt = Array.from(select.options).find(opt => opt.value === currentSesi);
            if (opt) select.value = currentSesi;
            showSesiTableDiperiksa(currentSesi);
        });
    </script>

    <!--DROPDOWN DOKTER DI PERIKSA-->
    <script>
        function filterDokterDiperiksa(selectedDokter) {
            const allTables = document.querySelectorAll('.sesiDiperiksa-table');
            allTables.forEach(table => {
                const rows = table.querySelectorAll('tbody tr');
                rows.forEach(row => {
                    const dokter = row.getAttribute('data-dokter');
                    if (selectedDokter === 'semua' || dokter === selectedDokter) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        }
    </script>

    <!-- DROPDOWN SESI Belum Hadir -->
    <script>
        function getCurrentSesiTidakSelesai() {
            const hour = new Date().getHours();
            if (hour >= 6 && hour < 12) return 'sesiTidakSelesai-Pagi';
            if (hour >= 12 && hour < 15) return 'sesiTidakSelesai-Siang';
            if (hour >= 15 && hour < 18) return 'sesiTidakSelesai-Sore';
            if (hour >= 18 && hour <= 23) return 'sesiTidakSelesai-Malam';
            return 'sesiTidakSelesai-Pagi'; // fallback (misal jam 00:00 – 05:59)
        }

        function showSesiTableTidakSelesai(selectedId) {
            document.querySelectorAll('.sesiTidakSelesai-table').forEach(table => {
                table.style.display = 'none';
            });

            const selectedTable = document.getElementById(selectedId);
            if (selectedTable) {
                selectedTable.style.display = 'block';
                selectedTable.scrollIntoView({
                    behavior: 'smooth'
                });
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            const currentSesi = getCurrentSesiTidakSelesai();
            const select = document.getElementById('sesiSelectTidakSelesai');
            const opt = Array.from(select.options).find(opt => opt.value === currentSesi);
            if (opt) select.value = currentSesi;
            showSesiTableTidakSelesai(currentSesi);
        });
    </script>

    <!--DROPDOWN DOKTER Belum Hadir-->
    <script>
        function filterDokterTidakSelesai(selectedDokter) {
            const allTables = document.querySelectorAll('.sesiTidakSelesai-table');
            allTables.forEach(table => {
                const rows = table.querySelectorAll('tbody tr');
                rows.forEach(row => {
                    const dokter = row.getAttribute('data-dokter');
                    if (selectedDokter === 'semua' || dokter === selectedDokter) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        }
    </script>

    <!-- DROPDOWN SESI SELESAI -->
    <script>
        function getCurrentSesiSelesai() {
            const hour = new Date().getHours();
            if (hour >= 6 && hour < 12) return 'sesiSelesai-Pagi';
            if (hour >= 12 && hour < 15) return 'sesiSelesai-Siang';
            if (hour >= 15 && hour < 18) return 'sesiSelesai-Sore';
            if (hour >= 18 && hour <= 23) return 'sesiSelesai-Malam';
            return 'sesiSelesai-Pagi'; // fallback, misalnya untuk jam 00:00–05:59
        }

        function showSesiTableSelesai(selectedId) {
            document.querySelectorAll('.sesiSelesai-table').forEach(table => {
                table.style.display = 'none';
            });

            const selectedTable = document.getElementById(selectedId);
            if (selectedTable) {
                selectedTable.style.display = 'block';
                selectedTable.scrollIntoView({
                    behavior: 'smooth'
                });
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            const currentSesi = getCurrentSesiSelesai();
            const select = document.getElementById('sesiSelectSelesai');
            const opt = Array.from(select.options).find(opt => opt.value === currentSesi);
            if (opt) select.value = currentSesi;
            showSesiTableSelesai(currentSesi);
        });
    </script>


    <!--DROPDOWN DOKTER SELESAI-->
    <script>
        function filterDokterSelesai(selectedDokter) {
            const allTables = document.querySelectorAll('.sesiSelesai-table');
            allTables.forEach(table => {
                const rows = table.querySelectorAll('tbody tr');
                rows.forEach(row => {
                    const dokter = row.getAttribute('data-dokter');
                    if (selectedDokter === 'semua' || dokter === selectedDokter) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        }
    </script>

    <!--GRAFIK JENIS KELAMIN-->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
    <script>
        const genderLabels = @json($grafikGender['labels']);
        const genderData = @json($grafikGender['data']);

        const backgroundColors = genderLabels.map(label => {
            const lower = label.toLowerCase();
            if (lower === 'perempuan') return '#FF69B4'; // Pink
            if (lower === 'laki-laki') return '#36A2EB'; // Biru
            return '#CCCCCC';
        });

        // Plugin untuk menampilkan total di tengah
        const centerTextPlugin = {
            id: 'centerText',
            beforeDraw(chart) {
                const {
                    width,
                    height,
                    ctx
                } = chart;
                const total = chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                const text = total + ' Pasien';

                ctx.save();
                ctx.font = 'bold 12px sans-serif';
                ctx.fillStyle = '#444';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText(text, width / 2, height / 2);
                ctx.restore();
            }
        };

        const ctxGender = document.getElementById('genderChart').getContext('2d');
        const genderChart = new Chart(ctxGender, {
            type: 'doughnut',
            data: {
                labels: genderLabels,
                datasets: [{
                    data: genderData,
                    backgroundColor: backgroundColors,
                    borderColor: '#fff',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    },
                    title: {
                        display: true,
                    },
                    datalabels: {
                        color: '#fff',
                        font: {
                            weight: 'bold',
                            size: 11
                        },
                        formatter: (value, context) => {
                            const data = context.chart.data.datasets[0].data;
                            const total = data.reduce((a, b) => a + b, 0);
                            const percentage = (value / total * 100).toFixed(1);
                            return percentage + '%';
                        }
                    }
                }
            },
            plugins: [ChartDataLabels, centerTextPlugin]
        });
    </script>
    <!--GRARIK UMUR KUNJUNGAN-->
    <script>
        const umurLabels = @json($grafikUmur['labels']);
        const umurData = @json($grafikUmur['data']);

        const ctxUmur = document.getElementById('umurChart').getContext('2d');
        const umurChart = new Chart(ctxUmur, {
            type: 'bar',
            data: {
                labels: umurLabels,
                datasets: [{
                    label: 'Jumlah Pasien',
                    data: umurData,
                    backgroundColor: '#4e73df',
                    borderRadius: 6,
                    maxBarThickness: 40,
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });
    </script>

    <!-- Grafik Layanan -->
    <!-- GRAFIK LAYANAN HARI INI -->
    <script>
        const layananLabels = @json($layananHariIni->pluck('Nama_Layanan'));
        const layananData = @json($layananHariIni->pluck('jumlah'));

        const ctxLayanan = document.getElementById('layananChart').getContext('2d');
        const layananChart = new Chart(ctxLayanan, {
            type: 'bar',
            data: {
                labels: layananLabels,
                datasets: [{
                    label: 'Jumlah Kunjungan',
                    data: layananData,
                    backgroundColor: '#1cc88a', // hijau
                    borderRadius: 6,
                    maxBarThickness: 40,
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: 'Top 5 Layanan Hari Ini'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });
    </script>

    <!--GRAFIK KUNJUNGAN DAN PASIEN-->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const ctx = document.getElementById('kunjunganPasienChart').getContext('2d');

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: {!! json_encode($tanggalLabels) !!},
                datasets: [{
                        label: 'Kunjungan',
                        data: {!! json_encode($dataKunjungan) !!},
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        tension: 0.3,
                        fill: true
                    },
                    {
                        label: 'Pasien Baru',
                        data: {!! json_encode($dataPasien) !!},
                        borderColor: 'rgba(255, 99, 132, 1)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        tension: 0.3,
                        fill: true
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        stepSize: 1
                    }
                }
            }
        });
    </script>

    <!--Jam-->
    <script>
        function updateClock() {
            const now = new Date();
            const jam = now.getHours().toString().padStart(2, '0');
            const menit = now.getMinutes().toString().padStart(2, '0');
            const detik = now.getSeconds().toString().padStart(2, '0');
            document.getElementById('liveClock').textContent = `${jam}:${menit}:${detik}`;
        }

        setInterval(updateClock, 1000);
        updateClock(); // panggil langsung saat pertama load
    </script>
